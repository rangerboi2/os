OS CODE
2. write a program to implement an address book with the options given below a) create address book b) view address book c) Insert Record d) Delete a record e) Modify a record f) Exit
def create_address_book():
    global address_book
    address_book = []
    print("Address book created successfully.")

def view_address_book():
    if not address_book:
        print("Address book is empty.")
        return
    print("\nAddress Book Records:")
    for idx, record in enumerate(address_book, start=1):
        print(f"{idx}. Name: {record['name']}, Phone: {record['phone']}, Email: {record['email']}")

def insert_record():
    name = input("Enter name: ").strip()
    phone = input("Enter phone number: ").strip()
    email = input("Enter email: ").strip()
    record = {'name': name, 'phone': phone, 'email': email}
    address_book.append(record)
    print("Record inserted successfully.")

def delete_record():
    if not address_book:
        print("Address book is empty.")
        return
    view_address_book()
    try:
        idx = int(input("Enter record number to delete: "))
        if 1 <= idx <= len(address_book):
            removed = address_book.pop(idx-1)
            print(f"Record '{removed['name']}' deleted successfully.")
        else:
            print("Invalid record number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

def modify_record():
    if not address_book:
        print("Address book is empty.")
        return
    view_address_book()
    try:
        idx = int(input("Enter record number to modify: "))
        if 1 <= idx <= len(address_book):
            record = address_book[idx-1]
            print("Leave blank to keep current value.")
            name = input(f"Enter new name [{record['name']}]: ").strip()
            phone = input(f"Enter new phone [{record['phone']}]: ").strip()
            email = input(f"Enter new email [{record['email']}]: ").strip()
            if name:
                record['name'] = name
            if phone:
                record['phone'] = phone
            if email:
                record['email'] = email
            print("Record updated successfully.")
        else:
            print("Invalid record number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

def main():
    global address_book
    address_book = []
    while True:
        print("\nAddress Book Menu")
        print("a) Create Address Book")
        print("b) View Address Book")
        print("c) Insert Record")
        print("d) Delete a Record")
        print("e) Modify a Record")
        print("f) Exit")
        choice = input("Choose an option: ").strip().lower()

        if choice == 'a':
            create_address_book()
        elif choice == 'b':
            view_address_book()
        elif choice == 'c':
            insert_record()
        elif choice == 'd':
            delete_record()
        elif choice == 'e':
            modify_record()
        elif choice == 'f':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()

3. Process control system calls: The demonstration of fork, execve and wait system calls along with zombie and orphan states. 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Function to create a zombie process
void zombie_process() {
    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed for zombie");
    } else if (pid == 0) {
        printf("[ZOMBIE] Child (PID=%d) exiting...\n", getpid());
        exit(0); // Child exits immediately
    } else {
        printf("[ZOMBIE] Parent (PID=%d) sleeping to create zombie child (PID=%d)...\n", getpid(), pid);
        sleep(10); // Delay wait() so child remains zombie for a while
        wait(NULL); // Clean up zombie
        printf("[ZOMBIE] Parent collected zombie child\n");
    }
}

// Function to create an orphan process
void orphan_process() {
    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed for orphan");
    } else if (pid == 0) {
        sleep(5); // Wait so parent exits first
        printf("[ORPHAN] Child (PID=%d, PPID=%d) is now orphan\n", getpid(), getppid());
        exit(0);
    } else {
        printf("[ORPHAN] Parent (PID=%d) exiting so child becomes orphan (PID=%d)...\n", getpid(), pid);
        exit(0);
    }
}

// Function to demonstrate execve()
void execve_demo() {
    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed for execve");
    } else if (pid == 0) {
        printf("[EXECVE] Child (PID=%d) executing /bin/ls using execve()\n", getpid());
        char *args[] = {"/bin/ls", "-l", NULL};
        execve("/bin/ls", args, NULL);
        perror("execve failed"); // This line runs only if execve fails
        exit(1);
    } else {
        wait(NULL);
        printf("[EXECVE] Parent (PID=%d) finished waiting for execve() child\n", getpid());
    }
}

int main() {
    printf("\n=== Process Control Demo (fork, execve, wait, zombie, orphan) ===\n");

    zombie_process();  // Show zombie state
    sleep(2);

    // Fork again to avoid mixing process trees
    pid_t p = fork();
    if (p == 0) {
        orphan_process(); // Orphan child created in a new process
    } else {
        wait(NULL);
    }

    sleep(2);
    execve_demo();     // Show execve usage

    return 0;
}

4. Write a program to show the demonstration of Scheduling Algorithms: 1) FCFS 2) SJF 3) Priority Scheduling in python

def fcfs_scheduling(processes):
    print("\n--- FCFS Scheduling ---")
    processes.sort(key=lambda x: x['arrival'])  # Sort by arrival time
    time = 0
    for p in processes:
        if time < p['arrival']:
            time = p['arrival']
        p['start'] = time
        p['waiting'] = time - p['arrival']
        time += p['burst']
        p['turnaround'] = p['waiting'] + p['burst']

    print_table(processes)


def sjf_scheduling(processes):
    print("\n--- SJF Scheduling ---")
    time = 0
    done = []
    while len(done) < len(processes):
        available = [p for p in processes if p['arrival'] <= time and p not in done]
        if not available:
            time += 1
            continue
        p = min(available, key=lambda x: x['burst'])  # Choose shortest job
        p['start'] = time
        p['waiting'] = time - p['arrival']
        time += p['burst']
        p['turnaround'] = p['waiting'] + p['burst']
        done.append(p)

    print_table(done)


def priority_scheduling(processes):
    print("\n--- Priority Scheduling ---")
    time = 0
    done = []
    while len(done) < len(processes):
        available = [p for p in processes if p['arrival'] <= time and p not in done]
        if not available:
            time += 1
            continue
        p = min(available, key=lambda x: x['priority'])  # Choose highest priority
        p['start'] = time
        p['waiting'] = time - p['arrival']
        time += p['burst']
        p['turnaround'] = p['waiting'] + p['burst']
        done.append(p)

    print_table(done)


def print_table(processes):
    print(f"{'PID':<5}{'AT':<5}{'BT':<5}{'PR':<5}{'WT':<5}{'TAT':<5}")
    for p in processes:
        print(f"{p['pid']:<5}{p['arrival']:<5}{p['burst']:<5}{p['priority']:<5}{p['waiting']:<5}{p['turnaround']:<5}")


# Input Sectionx
def get_input():
    processes = []
    n = int(input("Enter number of processes: "))
    for i in range(n):
        print(f"\nProcess {i+1}")
        arrival = int(input("Arrival Time: "))
        burst = int(input("Burst Time: "))
        priority = int(input("Priority (lower number = higher priority): "))
        processes.append({
            'pid': f'P{i+1}',
            'arrival': arrival,
            'burst': burst,
            'priority': priority
        })
    return processes


# Main Menu
def main():
    processes = get_input()
    fcfs_scheduling([p.copy() for p in processes])
    sjf_scheduling([p.copy() for p in processes])
    priority_scheduling([p.copy() for p in processes])


if __name__ == "__main__":
    main()

5. Thread management using pthread library. Implement matrix multiplication using multithreading. Application should have pthread_create, pthread_join, pthread_exit. In the program, every thread must return the value and must be collected in pthread_join in the main function. Final sum of row column multiplication must be done by main thread (main function) in python. 

import threading

# Result matrix
result = []

# Worker thread class
class MultiplyThread(threading.Thread):
    def __init__(self, row, col, i, j):
        threading.Thread.__init__(self)
        self.row = row
        self.col = col
        self.i = i
        self.j = j
        self.value = 0

    def run(self):
        self.value = sum(self.row[k] * self.col[k] for k in range(len(self.col)))

    def get_value(self):
        return self.value


def get_matrix_input(name):
    r = int(input(f"Enter number of rows in {name}: "))
    c = int(input(f"Enter number of columns in {name}: "))
    print(f"Enter values for {name} row-wise:")
    matrix = []
    for i in range(r):
        row = list(map(int, input().split()))
        if len(row) != c:
            print("Incorrect number of columns! Exiting.")
            exit()
        matrix.append(row)
    return matrix, r, c


def transpose(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]


def matrix_multiply(A, B):
    global result
    threads = []
    result = [[0] * len(B[0]) for _ in range(len(A))]
    B_T = transpose(B)  # So we can take columns as rows
    thread_map = [[None for _ in range(len(B_T))] for _ in range(len(A))]

    for i in range(len(A)):
        for j in range(len(B_T)):
            thread = MultiplyThread(A[i], B_T[j], i, j)
            thread_map[i][j] = thread
            threads.append(thread)
            thread.start()

    for t in threads:
        t.join()

    for i in range(len(A)):
        for j in range(len(B[0])):
            result[i][j] = thread_map[i][j].get_value()

    return result


def print_matrix(mat, name):
    print(f"\n{name}:")
    for row in mat:
        print(" ".join(map(str, row)))


def main():
    A, r1, c1 = get_matrix_input("Matrix A")
    B, r2, c2 = get_matrix_input("Matrix B")

    if c1 != r2:
        print("Matrix multiplication not possible. Columns of A must match rows of B.")
        return

    print_matrix(A, "Matrix A")
    print_matrix(B, "Matrix B")

    result_matrix = matrix_multiply(A, B)

    print_matrix(result_matrix, "Resultant Matrix (A x B)")


if __name__ == "__main__":
    main()

6. Thread synchronization using counting semaphores and mutual exclusion using mutex. Application to demonstrate producer-consumer problem with counting semaphores and mutex using python. 

import threading
import time
import random

# Buffer and its capacity
buffer = []
BUFFER_SIZE = 5

# Synchronization primitives
mutex = threading.Lock()
empty_slots = threading.Semaphore(BUFFER_SIZE)  # Initially, all slots are empty
filled_slots = threading.Semaphore(0)           # Initially, no slots are filled

# Producer thread
def producer():
    for i in range(10):
        item = random.randint(1, 100)
        empty_slots.acquire()        # Wait for an empty slot
        mutex.acquire()              # Lock access to the buffer

        buffer.append(item)
        print(f"[Producer] Produced: {item} | Buffer: {buffer}")

        mutex.release()              # Unlock buffer
        filled_slots.release()       # Signal that there's a new filled slot
        time.sleep(random.uniform(0.5, 1.5))

# Consumer thread
def consumer():
    for i in range(10):
        filled_slots.acquire()       # Wait for a filled slot
        mutex.acquire()              # Lock access to the buffer

        item = buffer.pop(0)
        print(f"[Consumer] Consumed: {item} | Buffer: {buffer}")

        mutex.release()              # Unlock buffer
        empty_slots.release()        # Signal that a slot is empty
        time.sleep(random.uniform(0.5, 1.5))

# Main
def main():
    prod_thread = threading.Thread(target=producer)
    cons_thread = threading.Thread(target=consumer)

    prod_thread.start()
    cons_thread.start()

    prod_thread.join()
    cons_thread.join()

    print("\n[Main] Producer and Consumer have finished execution.")

if __name__ == "__main__":
    main()